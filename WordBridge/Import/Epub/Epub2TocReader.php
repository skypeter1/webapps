<?php

/**
 * Copyright Â© 2012 Metrodigi, Inc. All Rights Reserved. Unpublished
 * -- rights reserved under the copyright laws of the United States.
 * USE OF A COPYRIGHT NOTICE IS PRECAUTIONARY ONLY AND DOES NOT IMPLY
 * PUBLICATION OR DISCLOSURE.  THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION
 * AND TRADE SECRETS OF METRODIGI, INC. USE, DISCLOSURE, OR REPRODUCTION IS
 * PROHIBITED WITHOUT THE PRIOR EXPRESS WRITTEN PERMISSION OF METRODIGI, INC.
 */

App::import('Vendor','Chaucer/Epub/TocReader/EpubTocReader');

class Epub2TocReader Implements EpubTocReader
{
    
    public $path;
    protected $xml;
    
    public function setTocFile($file) 
    {
        $this->path = $file;
    }
    
    public function parse()
    {
        libxml_clear_errors();
        $xml_string = trim(file_get_contents($this->path));
        try
        {
            $this->xml = new SimpleXMLElement($xml_string);
            return true;
        }
        catch (Exception $e)
        {
            CakeLog::error("Unable to parse TOC: ".implode(', ',  libxml_get_errors()));
            return false;
        }          
    }
    
    private function getNavPoints($points, $level)
    {
        $sorted = array();
        foreach ($points as $p)
        {
            $text = (string) $p->navLabel->text;
            $src = (string) $p->content['src'];
            $id = (string) $p['id'];
            if(property_exists($p, "navPoint"))
            {
                $children = $this->getNavPoints($p->navPoint, $level+1);
            }
            else
            {
                $children = array();
            }
            $sorted[] = array('label' => $text, 'href' => $src, 'level'=>$level, 'id' => $id, 'children'=>$children);
        }        
        return $sorted;
    }
    
    /**
     * returns an array of toc items generated by parse
     * @return array
     */
    public function getNavData()
    {
        $points = !empty($this->xml) ? $this->xml->navMap->navPoint : array();
        $sorted = $this->getNavPoints($points, 0);
        return $sorted;
    }

}
